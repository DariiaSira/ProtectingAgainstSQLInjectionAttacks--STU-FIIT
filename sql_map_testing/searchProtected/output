C:\Users\sirad\sqlmap-dev>python sqlmap.py -u "http://127.0.0.1:8000/searchProtected/" --data="search_query=admin" --level=2 --risk=2
        ___
       __H__
 ___ ___[)]_____ ___ ___  {1.8.4.1#dev}
|_ -| . [.]     | .'| . |
|___|_  [']_|_|_|__,|  _|
      |_|V...       |_|   https://sqlmap.org

[!] legal disclaimer: Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program

[*] starting @ 22:09:15 /2024-04-11/

[22:09:16] [INFO] testing connection to the target URL
[22:09:16] [INFO] testing if the target URL content is stable
[22:09:16] [INFO] target URL content is stable
[22:09:16] [INFO] testing if POST parameter 'search_query' is dynamic
[22:09:16] [INFO] POST parameter 'search_query' appears to be dynamic
[22:09:16] [WARNING] heuristic (basic) test shows that POST parameter 'search_query' might not be injectable
[22:09:16] [INFO] testing for SQL injection on POST parameter 'search_query'
[22:09:16] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'
[22:09:17] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'
[22:09:17] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (comment)'
[22:09:17] [INFO] testing 'MySQL RLIKE boolean-based blind - WHERE, HAVING, ORDER BY or GROUP BY clause'
[22:09:18] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'
[22:09:18] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'
[22:09:19] [INFO] testing 'SQLite AND boolean-based blind - WHERE, HAVING, GROUP BY or HAVING clause (JSON)'
[22:09:19] [INFO] testing 'Boolean-based blind - Parameter replace (original value)'
[22:09:19] [INFO] testing 'Boolean-based blind - Parameter replace (DUAL)'
[22:09:19] [INFO] testing 'Boolean-based blind - Parameter replace (CASE)'
[22:09:19] [INFO] testing 'MySQL >= 5.0 boolean-based blind - ORDER BY, GROUP BY clause'
[22:09:19] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY, GROUP BY clause'
[22:09:19] [INFO] testing 'MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'
[22:09:19] [INFO] testing 'MySQL >= 5.1 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (EXTRACTVALUE)'
[22:09:20] [INFO] testing 'PostgreSQL AND error-based - WHERE or HAVING clause'
[22:09:20] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (IN)'
[22:09:20] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONVERT)'
[22:09:20] [INFO] testing 'Microsoft SQL Server/Sybase AND error-based - WHERE or HAVING clause (CONCAT)'
[22:09:20] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (XMLType)'
[22:09:21] [INFO] testing 'Oracle AND error-based - WHERE or HAVING clause (UTL_INADDR.GET_HOST_ADDRESS)'
[22:09:21] [INFO] testing 'MySQL >= 5.1 error-based - PROCEDURE ANALYSE (EXTRACTVALUE)'
[22:09:21] [INFO] testing 'MySQL >= 5.0 error-based - Parameter replace (FLOOR)'
[22:09:21] [INFO] testing 'MySQL >= 5.1 error-based - Parameter replace (EXTRACTVALUE)'
[22:09:21] [INFO] testing 'PostgreSQL error-based - Parameter replace'
[22:09:21] [INFO] testing 'Microsoft SQL Server/Sybase error-based - Stacking (EXEC)'
[22:09:21] [INFO] testing 'Generic inline queries'
[22:09:21] [INFO] testing 'MySQL inline queries'
[22:09:21] [INFO] testing 'PostgreSQL inline queries'
[22:09:21] [INFO] testing 'Microsoft SQL Server/Sybase inline queries'
[22:09:21] [INFO] testing 'Oracle inline queries'
[22:09:21] [INFO] testing 'MySQL >= 5.0.12 stacked queries (comment)'
[22:09:21] [INFO] testing 'PostgreSQL > 8.1 stacked queries (comment)'
[22:09:21] [INFO] testing 'PostgreSQL stacked queries (heavy query - comment)'
[22:09:22] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (comment)'
[22:09:22] [INFO] testing 'Microsoft SQL Server/Sybase stacked queries (DECLARE - comment)'
[22:09:22] [INFO] testing 'Oracle stacked queries (DBMS_PIPE.RECEIVE_MESSAGE - comment)'
[22:09:22] [INFO] testing 'Oracle stacked queries (heavy query - comment)'
[22:09:22] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (query SLEEP)'
[22:09:22] [INFO] testing 'MySQL >= 5.0.12 AND time-based blind (SLEEP)'
[22:09:22] [INFO] testing 'MySQL < 5.0.12 AND time-based blind (BENCHMARK)'
[22:09:23] [INFO] testing 'MySQL >= 5.0.12 RLIKE time-based blind'
[22:09:23] [INFO] testing 'PostgreSQL > 8.1 AND time-based blind'
[22:09:23] [INFO] testing 'PostgreSQL AND time-based blind (heavy query)'
[22:09:23] [INFO] testing 'Microsoft SQL Server/Sybase time-based blind (IF)'
[22:09:23] [INFO] testing 'Microsoft SQL Server/Sybase AND time-based blind (heavy query)'
[22:09:24] [INFO] testing 'Oracle AND time-based blind'
[22:09:24] [INFO] testing 'Oracle AND time-based blind (heavy query)'
[22:09:24] [INFO] testing 'Informix AND time-based blind (heavy query)'
[22:09:24] [INFO] testing 'MySQL >= 5.0.12 time-based blind - Parameter replace'
it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n] y
[22:09:31] [INFO] testing 'Generic UNION query (NULL) - 1 to 10 columns'
[22:09:31] [INFO] testing 'MySQL UNION query (NULL) - 1 to 10 columns'
[22:09:32] [WARNING] POST parameter 'search_query' does not seem to be injectable
[22:09:32] [CRITICAL] all tested parameters do not appear to be injectable. Try to increase values for '--level'/'--risk' options if you wish to perform more tests. If you suspect that there is some kind of protection mechanism involved (e.g. WAF) maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment') and/or switch '--random-agent'

[*] ending @ 22:09:32 /2024-04-11/